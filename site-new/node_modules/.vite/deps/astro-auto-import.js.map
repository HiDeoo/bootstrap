{
  "version": 3,
  "sources": ["../../../../node_modules/astro-auto-import/dist/index.js"],
  "sourcesContent": ["import { parse as parseJs } from 'acorn';\nimport { parse, resolve } from 'node:path';\nconst resolveModulePath = (path) => {\n    // Resolve relative paths\n    if (path.startsWith('.'))\n        return resolve(path);\n    // Don’t resolve other paths (e.g. npm modules)\n    return path;\n};\n/**\n * Use a filename to generate a default import name.\n * @example\n * getDefaultImportName('/path/to/cool-component.astro');\n * // => coolcomponent\n */\nfunction getDefaultImportName(path) {\n    return parse(path).name.replaceAll(/[^\\w\\d]/g, '');\n}\n/**\n * Create an import statement.\n * @param imported Stuff to import (e.g. `Thing` or `{ Named }`)\n * @param module Module to import from (e.g. `module-thing`)\n */\nfunction formatImport(imported, module) {\n    return `import ${imported} from '${module}';`;\n}\n/** Create a statement assigning a variable to the global object. */\nfunction formatExposure(name) {\n    return `globalThis.${name} = ${name};`;\n}\n/** Get the parts for a named import statement from config. */\nfunction formatNamedImports(namedImport) {\n    const imports = [];\n    const exposedNames = [];\n    for (const imp of namedImport) {\n        if (typeof imp === 'string') {\n            imports.push(imp);\n            exposedNames.push(imp);\n        }\n        else {\n            const [from, as] = imp;\n            imports.push(`${from} as ${as}`);\n            exposedNames.push(as);\n        }\n    }\n    return [`{ ${imports.join(', ')} }`, exposedNames.map(formatExposure)];\n}\n/** Generate imports and exposures from a full imports config array. */\nfunction processImportsConfig(config) {\n    const imports = [];\n    const exposures = [];\n    for (const option of config) {\n        if (typeof option === 'string') {\n            imports.push(formatImport(getDefaultImportName(option), resolveModulePath(option)));\n            exposures.push(formatExposure(getDefaultImportName(option)));\n        }\n        else {\n            for (const path in option) {\n                const namedImports = option[path];\n                const [importString, exposureArray] = formatNamedImports(namedImports);\n                imports.push(formatImport(importString, resolveModulePath(path)));\n                exposures.push(...exposureArray);\n            }\n        }\n    }\n    return { imports, exposures };\n}\n/** Generate a JavaScript string from a full imports config array. */\nfunction generateScript(config) {\n    const { imports, exposures } = processImportsConfig(config);\n    return [...imports, ...exposures].join('\\n');\n}\n/** Get an MDX node representing a block of imports based on user config. */\nfunction generateImportsNode(config) {\n    const { imports } = processImportsConfig(config);\n    const js = imports.join('\\n');\n    return {\n        type: 'mdxjsEsm',\n        value: '',\n        data: {\n            estree: {\n                body: [],\n                ...parseJs(js, { ecmaVersion: 'latest', sourceType: 'module' }),\n                type: 'Program',\n                sourceType: 'module',\n            },\n        },\n    };\n}\nexport default function AutoImport(integrationConfig) {\n    return {\n        name: 'auto-import',\n        hooks: {\n            'astro:config:setup': ({ injectScript, config, updateConfig }) => {\n                // Inject our import + expose scripts for `.astro` and legacy `.md` support.\n                injectScript('page-ssr', generateScript(integrationConfig.imports));\n                const hasMarkdownPlugins = !!(config.markdown.remarkPlugins.length || config.markdown.rehypePlugins.length);\n                // Check MDX integration is initialized after auto-import.\n                const mdxIndex = config.integrations.findIndex((i) => i.name === '@astrojs/mdx');\n                const thisIndex = config.integrations.findIndex((i) => i.name === 'auto-import');\n                if (mdxIndex >= 0 && mdxIndex < thisIndex) {\n                    console.warn('[auto-import] ⚠️ @astrojs/mdx initialized BEFORE astro-auto-import.\\n' +\n                        '              Auto imports in .mdx files won’t work!\\n' +\n                        '              Move the MDX integration after auto-import in your integrations array in astro.config.');\n                }\n                // Skip adding MDX plug-in if MDX is not being used.\n                if (mdxIndex === -1)\n                    return;\n                // Add a remark plugin to inject imports into `.mdx`.\n                const importsNode = generateImportsNode(integrationConfig.imports);\n                updateConfig({\n                    markdown: {\n                        extendDefaultPlugins: config.markdown.extendDefaultPlugins ?? !hasMarkdownPlugins,\n                        remarkPlugins: [\n                            function rehypeInjectMdxImports() {\n                                return function injectMdxImports(tree, vfile) {\n                                    if (!vfile.basename?.endsWith('.md')) {\n                                        tree.children.unshift(importsNode);\n                                    }\n                                };\n                            },\n                        ],\n                    },\n                });\n            },\n        },\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
