---
import fs from 'node:fs'
import path from 'node:path'
import { Prism } from '@astrojs/prism'

interface Props {
  /**
   * The CSS class(es) to be added to the `pre` HTML element when rendering code blocks in Markdown.
   * Note that this prop is not used when the component is invoked directly.
   */
  class?: string
  /**
   * The code to highlight.
   */
  code?: string
  /**
   * The CSS class(es) to be added to the `div` wrapper HTML element.
   */
  containerClass?: string
  /**
   * The language to use for highlighting.
   * @see https://prismjs.com/#supported-languages
   */
  lang?: string
  /**
   * A path to the file containing the code to highlight.
   * This takes precedence over the `code` prop.
   */
  filePath?: string
}

const { class: className, code, containerClass, filePath, lang } = Astro.props

// TODO(HiDeoo) Fix path and should also be versionned and documented
// TODO(HiDeoo) When done, maybe rename the `filePath` prop to something more explicit like versionedFilePath or something
const codeToDisplay = filePath ? fs.readFileSync(path.join(process.cwd(), 'site-new/public', filePath), 'utf8') : code

// TODO(HiDeoo) Style (We use Chroma style overriden in _syntax.scss)
// TODO(HiDeoo) sh $ prefix
// TODO(HiDeoo) tabindex on pre (or maybe not https://github.com/alecthomas/chroma/pull/736)
---

<script>
  import ClipboardJS from 'clipboard'

  const btnTitle = 'Copy to clipboard'
  const btnEdit = 'Edit on StackBlitz'

  function snippetButtonTooltip(selector: string, title: string) {
    document.querySelectorAll(selector).forEach((btn) => {
      bootstrap.Tooltip.getOrCreateInstance(btn, { title })
    })
  }

  snippetButtonTooltip('.btn-clipboard', btnTitle)
  snippetButtonTooltip('.btn-edit', btnEdit)

  const clipboard = new ClipboardJS('.btn-clipboard', {
    target: (trigger) => trigger.closest('.bd-code-snippet')?.querySelector('.highlight')!,
    text: (trigger) => {
      // Trim text to workaround a Firefox issue where the structure of the DOM (uncontrolled) is relevant for the
      // copied text.
      // https://github.com/zenorocha/clipboard.js/issues/439#issuecomment-312344621
      return trigger.closest('.bd-code-snippet')?.querySelector('.highlight')!.textContent?.trim()!
    },
  })

  clipboard.on('success', (event) => {
    const iconFirstChild = event.trigger.querySelector('.bi')?.firstElementChild
    const tooltipBtn = bootstrap.Tooltip.getInstance(event.trigger)
    const namespace = 'http://www.w3.org/1999/xlink'
    const originalXhref = iconFirstChild?.getAttributeNS(namespace, 'href')
    // TODO(HiDeoo) Check other cases where this component is used and see if this code is relevant somehow
    // const originalTitle = event.trigger?.title

    tooltipBtn?.setContent({ '.tooltip-inner': 'Copied!' })

    event.trigger.addEventListener(
      'hidden.bs.tooltip',
      () => {
        tooltipBtn?.setContent({ '.tooltip-inner': btnTitle })
      },
      { once: true }
    )

    event.clearSelection()

    if (originalXhref) {
      iconFirstChild?.setAttributeNS(namespace, 'href', originalXhref.replace('clipboard', 'check2'))
    }

    setTimeout(() => {
      if (originalXhref) {
        iconFirstChild?.setAttributeNS(namespace, 'href', originalXhref)
      }

      // TODO(HiDeoo) See todo above regarding `originalTitle`
      // event.trigger.title = originalTitle
    }, 2000)
  })

  clipboard.on('error', (event) => {
    const modifierKey = /mac/i.test(navigator.userAgent) ? '\u2318' : 'Ctrl-'
    const fallbackMsg = `Press ${modifierKey}C to copy`
    const tooltipBtn = bootstrap.Tooltip.getInstance(event.trigger)

    tooltipBtn?.setContent({ '.tooltip-inner': fallbackMsg })

    event.trigger.addEventListener(
      'hidden.bs.tooltip',
      () => {
        tooltipBtn?.setContent({ '.tooltip-inner': btnTitle })
      },
      { once: true }
    )
  })
</script>

<div class:list={['bd-code-snippet', containerClass]}>
  {
    Astro.slots.has('pre') ? (
      <slot name="pre" />
    ) : (
      <div class="bd-clipboard">
        <button type="button" class="btn-clipboard">
          <svg class="bi" role="img" aria-label="Copy">
            <use xlink:href="#clipboard" />
          </svg>
        </button>
      </div>
    )
  }
  <div class="highlight">
    {
      codeToDisplay && lang ? (
        <Prism code={codeToDisplay} lang={lang} />
      ) : (
        /* prettier-ignore */ <pre class={className}><slot /></pre>
      )
    }
  </div>
</div>
