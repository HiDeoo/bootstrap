---
import { getGrays } from '../../libs/data/grays'

interface Props {
  /**
   * The SVG background color.
   * @default "#868e96"
   */
  background?: string
  /**
   * CSS classes to append to `bd-placeholder-img` for the `svg` or `img` elements.
   */
  class?: string
  /**
   * The text color (foreground).
   * @default "#dee2e6"
   */
  color?: string
  /**
   * The placeholder height.
   * @default "180"
   */
  height?: string
  /**
   * If it should render `svg` or `img` tags.
   * @default "svg"
   */
  markup?: 'img' | 'svg'
  /**
   * The text to show in the image. You can explicitely pass the `false` boolean value (and not the string "false") to
   * hide the text
   * @default "${width}x{$height)"
   */
  text?: string | false
  /**
   * Used in the SVG `title` tag. You can explicitely pass the `false` boolean value (and not the string "false") to
   * hide the title.
   * @default "Placeholder"
   */
  title?: string | false
  /**
   * The placeholder width.
   * @default "100%"
   */
  width?: string
}

// TODO: double check the rendering of the grays (doubt about the index value compared to Hugo)
// TODO(HiDeoo) `getGrays()` should be refactored to not rely on indexes but have strictly typed values to use, e.g. `getGrays().100` or `getGrays('100')`.
// TODO(HiDeoo) After migrating the docs, make sure this is never called with the "false" string.
const {
  background = getGrays()[5].hex,
  class: className,
  color = getGrays()[2].hex,
  height = '180',
  markup = 'svg',
  text,
  title = 'Placeholder',
  width = '100%',
} = Astro.props

const placeholderText = text ?? `${width}x${height}`

const showText = placeholderText !== false
const showTitle = title !== false

const placeholderClassList = ['bd-placeholder-img', className]
const placeholderRole = showTitle || showText ? 'img' : undefined
const placeholderAriaHidden = !showText && !showTitle ? 'true' : undefined

const placeholderLabel =
  showText || showTitle
    ? `${showTitle ? title : ''}${showTitle && showText ? ': ' : ''}${showText ? placeholderText : ''}`
    : undefined

function getPlaceholderSrc() {
  // Sanitize the background and text colors by removing the leading hash if any.
  const bgColor = background.replace(/^#/, '')
  const textColor = color.replace(/^#/, '')

  // Inline the SVG with the `data:` URI scheme.
  let placeholderSrc = `data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E`

  if (showTitle) {
    // Append the <title> tag if any.
    placeholderSrc = `${placeholderSrc}%3Ctitle%3E${title}%3C/title%3E`
  }

  // Fill the image rect with the expected background color.
  placeholderSrc = `${placeholderSrc}%3Crect%20width='100%25'%20height='100%25'%20fill='%23${bgColor}'%3E%3C/rect%3E`

  if (showText) {
    // Append the <text> tag if any with the expected color.
    placeholderSrc = `${placeholderSrc}%3Ctext%20x='50%25'%20y='50%25'%20fill='%23${textColor}'%20dy='.3em'%3E${placeholderText}%3C/text%3E`
  }

  // Close the SVG.
  placeholderSrc = `${placeholderSrc}%3C/svg%3E`

  return placeholderSrc
}
---

{
  markup === 'img' ? (
    <img
      alt={placeholderLabel}
      class:list={placeholderClassList}
      height={height}
      src={getPlaceholderSrc()}
      width={width}
    />
  ) : (
    <svg
      aria-hidden={placeholderAriaHidden}
      aria-label={placeholderLabel}
      class:list={placeholderClassList}
      focusable="false"
      height={height}
      preserveAspectRatio="xMidYMid slice"
      role={placeholderRole}
      width={width}
      xmlns="http://www.w3.org/2000/svg"
    >
      {showTitle && <title>{title}</title>}
      <rect width="100%" height="100%" fill={background} />
      {showText && (
        <text x="50%" y="50%" fill={color} dy=".3em">
          {placeholderText}
        </text>
      )}
    </svg>
  )
}
