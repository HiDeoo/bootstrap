---
import type { HTMLAttributes } from 'astro/types'
import { getConfig, getVersionedBsCssPath } from '../../libs/config'
import type { Layout } from '../../libs/layout'

interface Props {
  direction?: 'rtl'
  layout: Layout
}

const { direction, layout } = Astro.props

const bsCssLinkProps: HTMLAttributes<'link'> = {
  href: getVersionedBsCssPath(direction),
  rel: 'stylesheet',
}

if (import.meta.env.PROD) {
  bsCssLinkProps.crossorigin = 'anonymous'
  bsCssLinkProps.integrity = direction === 'rtl' ? getConfig().params.cdn.css_rtl_hash : getConfig().params.cdn.css_hash
}
---

{layout === 'docs' && <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@docsearch/css@3" />}

<link {...bsCssLinkProps} />

<!--TODO: handle all elements right after -->
<!--

{{- if (ne .Page.Layout "examples") }}
TODO(HiDeoo) This should prolly use getVersionedDocsPath()
{{- $targetDocsCssPath := path.Join "/docs" .Site.Params.docs_version "assets/css/docs.css" -}}
{{- $sassOptions := dict "targetPath" $targetDocsCssPath "outputStyle" "expanded" "precision" 6 -}}
{{- $postcssOptions := dict "use" "autoprefixer" "noMap" true -}}
TODO(HiDeoo) The current import of the style does not respect any of the config below, figure out if we can port it back
to the Astro implementation or we need to move out the stylesheets processing to a custom adapter.
{{ if eq hugo.Environment "production" -}}
  {{- $sassOptions = merge $sassOptions (dict "outputStyle" "compressed") -}}
{{- end -}}

{{- $style := resources.Get "scss/docs.scss" | toCSS $sassOptions | postCSS $postcssOptions }}

<link href="{{ $style.Permalink | relURL }}" rel="stylesheet">
{{- end }}
-->

<!-- TODO(HiDeoo) See todo above regarding style imports -->
<style lang="scss">
  @import '../../scss/docs';
</style>
